# 分散型Obsidian Vault連携システム — アーキテクチャ概要

本システムは、複数の参加者（メンバー）が自身のObsidian Vaultで協調作業を行い、公開コンテンツのID管理とリンクの整合性をグループ共通リポジトリの GitHub Actions によって一元的に制御するための分散型アーキテクチャです。

---

## 1. システム構成要素（3層構造）

システムは、参加者のローカル Vault、ID 管理を担当する共通データストア、および自動処理層から構成されます。

### 構成要素一覧

| 構成要素 | 役割 | 備考 |
|---|---|---|
| ローカル Vault | 参加者の作業空間。新規ファイル作成、編集、コミットを行う。 | TemplaterJS（Step 1〜5）が実行されるクライアント層。 |
| 共通リポジトリ | IDマップ (ID_Lookup/) などのデータストア、および共同編集記事のマスターソース。 | 唯一のID書き込み権限を持つ中央集権的な層。 |
| GitHub Actions | サーバーサイドでの自動処理。公開コンテンツの生成、IDマップ更新、リンクの自動修正、共同編集記事のPR作成を担当。 | システムの整合性維持機構。 |

---

## 1.3 ブランチ戦略（参加者リポジトリ）

参加者がブランチ戦略を意識しないよう、`develop` を日常の作業ブランチとし、`main` は保護された最終成果物ブランチとします。

| ブランチ名 | 役割 | 権限設定（必須） | 参加者の操作 |
|---|---|---:|---|
| develop | 日常作業・自動修正ブランチ。参加者のプッシュを受け入れ、Actionsによる自動修正コミットがここに格納される。 | 参加者、Actionsからの書き込みを許可。 | ここに直プッシュする（他のブランチ操作は不要）。 |
| main | Web公開・最終成果物ブランチ。常に安定した状態を保つ。 | **ブランチ保護を設定し、Actionsからのマージのみ許可。** 手動プッシュは禁止。 | 意識しない（Actionsが自動管理）。 |
| hotfix/<topic> | 緊急修正。main から派生し、修正後 main および develop にマージされる。 | 権限者のみ書き込み、PR作成を許可。 | 緊急時にのみ利用。 |
| times/<topic> | 即時投稿。main から派生し、軽量なチェック後 main および develop にマージされる。 | 権限者のみ書き込み、PR作成を許可。 | 即時公開を要する記事に利用。 |

---

## 2. Vault内ディレクトリ構造と役割

公開範囲と管理主体に応じて、ファイルパスが厳密に分けられています。

| パス | 役割 | 管理主体 | 正規化 |
|---|---|---|---|
| `_Share/Public/Web/` | Web公開用の最終成果物。短縮URLはこのパスを参照する。 | GitHub Actions (生成と書き込み) | Actionsにより `@ID` 付与 |
| `_Share/Public/Member/` | メンバー間同期用のソース。他のメンバーの Vault に同期される。 | GitHub Actions (生成と書き込み) | Actionsにより `@ID` 付与 |
| `_Share/Members/{ID}/Public/` | 他のメンバー の公開コンテンツ。`_Share/Public/Member/` の内容を外部から同期する。 | 外部からの同期（読み取り専用） | Actionsにより `@ID` 付与 |
| `_Share/Common/Datastore/` | IDマップ (ID_Lookup/) などのシステムデータ。 | 共通リポジトリ Actions | 読み取り専用 |
| `_Share/Common/Docs/` | グループ共通の共同編集記事。共通リポジトリから同期する。 | 共通リポジトリ（読み取り/編集PR提出） | Actionsにより `@ID` 付与 |
| `_Sys/` | システム設定、Archetype、キャッシュ | ローカル Vault の管理ファイル | なし |
| 作業ディレクトリ | 参加者が直接編集する非公開の記事ソース（例: `Notes/`, `Drafts/` など）。 | 参加者自身 | なし |
| 作業ディレクトリ (一時的) | `Inbox/Times/` | 参加者が一時的にファイルを置き、Actionsが自動で `times` ブランチに切り出すためのキュー。 | なし |

---

## 3. 処理フローと整合性維持のメカニズム

処理は、ローカルでの ID 生成とリレーションシップ記録と、サーバーでの整合性収束の2つのフェーズで構成されます。

### フェーズ A: クライアント（Obsidian / Templater）処理

| Step | 処理内容 | 目的 |
|---:|---|---|
| 0. Gitクライアント設定と自動化 | 使用する Git クライアント（例：Obsidian Git プラグイン、デスクトップアプリ）を設定し、pull および push の操作を可能な限り自動実行するように構成する。 | 参加者の意識的な Git 操作を最小限に抑える。 |
| 新規作成時 (Step 2/4) | 1. 16進数9桁の `id_hex` と 64進数6桁の `id_short` をランダム生成する。ローカルの ID マップを参照して重複がないかチェックし、重複する場合は再生成する。 2. ファイルは作業ディレクトリに、IDなしの標準ファイル名で保存され、Front Matter に初期値として格納される。 | 不変のキーの確立と、Actionsによるリネームコミットの回避。IDのユニーク性をローカルで確保。 |
| ファイル保存時 (Step 5) | 1. ローカルの最新 ID マップを参照。 2. ファイル本文から Wikilink を抽出。 3. リンク先の ID (`id_hex`) を解決し、Front Matter の `outboundLinks[].targetId` に格納。 | リンクのデータ整合性を保証（ファイル名が変わっても ID で追跡）。 |

> 注: クライアント側では「ID（不変キー）を優先して管理」し、ファイル名やタイトルは可変（表示目的）として扱います。これにより、名前変更しても内部関係は保持されます。

### フェーズ B: サーバー（GitHub Actions）処理

Actions は、リポジトリへのプッシュをトリガーに以下の処理を実行し、リポジトリを自己修正します。

| Step | 処理内容 | 目的 |
|---:|---|---|
| 1. 公開コンテンツの生成と正規化 | Vault 全体をスキャンし、公開対象のソース記事を特定する。その記事にローカルで付与された ID を使用し、`_Share/Public/Web/` および `_Share/Public/Member/` に正規化されたファイル名（例: `Note Title@ABC123.md`）としてコピー＆生成する。 | Web 公開とメンバー同期の二つの配信先へのコンテンツ生成と、永続的な URL の確保。 |
| 1.5. 即時投稿ブランチへの自動切り出し | `develop` へのプッシュ時に `Inbox/Times/` 以下に新しいファイルが存在する場合、そのファイルのみを抽出し、`times/<ランダムID>` ブランチを作成・プッシュし、`main` への PR を作成する。 | 参加者の times フローへの乗せ換えを自動化。 |
| 1.6. 即時投稿ソースファイルのクリーンアップ | Actions は `times` ブランチへの切り出しが完了した後、直ちに `develop` に対して、`Inbox/Times/` 以下のファイルを削除するコミットを作成し、プッシュする。 | コンフリクト回避：リモートの `develop` から即座にソースファイルを消し、その後の pull や Actions 処理での競合を防ぐ。 |
| 2. IDマップの更新 | 全ての公開ファイル（`_Share/Public/Web/` および `_Share/Public/Member/`）と正規化されたパス情報から、共通リポジトリの `ID_Lookup/` ファイル群を更新・プッシュ。 | 最新の ID 解決情報を全メンバーに配布。 |
| 3. リンク参照の自動正規化 | 最新の ID マップを参照し、全 Markdown ファイル本文（主に作業ディレクトリ内）をスキャン。Wikilink のテキストを、正規化された新しいファイル名（例: `[[新しいファイル名@ABC123]]`）に自動的に書き換え、Actions がリベース戦略を用いて追加コミットする。 | 参加者が `git pull` した際に、Obsidian 上のリンク切れを解消し、UX の整合性を保つ。 |
| 4. 共同編集の提案（PR作成） | 参加者リポジトリ内の `_Share/Common/Docs/` への変更を検知した場合、共通リポジトリに対し、その変更を含むプルリクエストを自動で作成する。 | 共同編集記事の変更を安全かつ公式な手続きで共通リポジトリにフィードバックする。 |
| 5. 共通リソースの自動同期 | トリガー拡張: 自身のプッシュ時、または共通リポジトリの更新検知時に、共通リポジトリの最新版の内容（`_Share/Common/Docs/` および `_Share/Common/Datastore/` の最新データ）を、参加者のリポジトリに自動でプルし、マージする。 | メンバーが手動で共有リソースの同期を行う手間を排除し、常に最新の ID マップと共同編集記事を参照可能にする。 |
| 6. 成果物のメインブランチへの自動プロモート | 条件付きプロモート: 上記の Actions が全て正常終了し、かつ Lint/形式チェックなどの簡単な CI が通過したことを確認した後、`develop` の変更を単一のコミットにまとめて**`main` ブランチへ自動でスカッシュマージ (Squash Merge)**する。 | クリーンなリリース履歴を `main` に残し、Actions によるノイズを隠蔽する。 |
| 6.5. `main` → `develop` へのコンフリクト回避付き同期 | `times` または `hotfix` が `main` にマージされた後、Actions が以下のコンフリクト回避戦略を実行する。<br>1. 事前削除コミット: `develop` に対して、既に `main` に移動/削除された `Inbox/Times/` 以下のファイルを事前に削除するコミットをプッシュ。<br>2. `main` の変更を `develop` に同期マージする。 | 参加者の pull 時のコンフリクトを回避し、`develop` の整合性を保つ。 |

---

## 4. 堅牢性のポイント

| 課題 | 解決策 |
|---|---|
| Git 競合 | ローカル作業領域と Actions の生成領域 (`_Share/Public/`) を分離し、競合リスクを最小化。Actions による修正コミットは、可能な限りリベース戦略で処理し、参加者の負担を軽減する。 |
| Web と同期の分離 | `_Share/Public/Web/` と `_Share/Public/Member/` に分けることで、Web 側で特別な処理（例：静的サイトジェネレータ）が必要になっても、メンバー同期側に影響を与えない。 |
| リンク切れ | Front Matter の `targetId` が不変の真の宛先を保持。Actions の自動修正によって本文中のリンク切れが収束する。 |
| Web リダイレクトの永続性 (ID およびパーマリンク) | 1. 短縮 ID リダイレクト: `/ABC123` 形式の URL は、ID を元に最新のファイルパスを ID Lookup から逆引きし、永続的にリダイレクトする。<br>2. パーマリンク履歴: 記事のファイル名（Web 上のパーマリンクスラッグ）が変更された場合でも、過去に使用されたパーマリンクから ID を導き出し、その ID を介して常に最新の正規化された URL へリダイレクトする仕組みを `404.html` に実装する。ID が失われた場合のみ 404 を返す。 |
| 緊急時 / 即時投稿の対応 | `hotfix/<topic>` や `times/<topic>` ブランチからの修正を `main` にマージ後、Actions が自動で `develop` にも同期することで、両方のブランチで変更が反映され、履歴の欠落を防ぐ。 |
| モバイルでの Git Hook 非対応 | Actions が pull の役割を代替し、非同期で他のリポジトリの最新変更を自動で取り込み、コンフリクトを回避しながら `develop` に反映することで、参加者はプッシュ操作のみに集中できる。 |

---

## 補足・運用上の注意（ベストプラクティス）

- ローカル側は ID の衝突判定のため、定期的に最新の `ID_Lookup` を取得しておくこと。可能なら TemplaterJS の実行時に `ID_Lookup` をフェッチする処理を組み込む。  
- Actions 側の自動修正は「読み取り専用のワークフロー」で始め、想定外の書き換えが発生した場合は通知（例：PR、Issue、Slack）を出す。  
- `main` の自動マージ前に必須のチェック（静的チェック、フォーマット、簡易リンク検証）を入れることで、公開品質を担保する。  
- 共同編集 PR（`_Share/Common/Docs/`）には、レビュープロセスとコンフリクト解消のルールを明文化しておくと良い。  
- times / hotfix フローは権限管理を厳格にし、誤った即時公開を防ぐ。  
